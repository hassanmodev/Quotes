{"version":3,"sources":["comp/Vote.js","comp/Quote.js","comp/ShowQuote.js","comp/SendQuote.js","comp/App.js","registerServiceWorker.js","index.js"],"names":["Vote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","vote","bind","assertThisInitialized","e","_this2","type","target","id","body","fetch","method","headers","Content-Type","JSON","stringify","then","data","json","updateVotes","votes","state","react_default","a","createElement","Fragment","className","onClick","title","React","Component","Empty","react_router_dom","to","Quote","quote","Quote_Empty","comp_Vote","by","BottomLink","link","ShowQuote","_id","comp","setState","apiUrl","match","params","keys","length","comp_Quote","ShowQuote_BottomLink","Alert","concat","style","width","role","msg","SendQuote","errorMsg","succMsg","sentQuote","formInput","formSubmit","isValid","event","defineProperty","value","preventDefault","form","Accept","succ","reset","_doc","_this3","onSubmit","SendQuote_Alert","react_router","placeholder","onInput","App","activeClassName","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","comp_App","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+TA0CeA,qBAtCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNQ,QAAQC,IAAIR,EAAKD,OACjBC,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,CAAAD,IAHEA,oEAKbY,GAAE,IAAAC,EAAAV,KACCW,EAAOF,EAAEG,OAAOC,GAIhBC,EAAO,CAAEH,KAHbA,EAAgB,WAATA,EAAoB,GAAK,EAGbE,GADVb,KAAKJ,MAAMiB,IAEpBE,MAHe,kBAGD,CACVC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAGpBJ,KAAMK,KAAKC,UAAUN,KAEpBO,KAAM,SAAAC,GAAI,OAAIA,EAAKC,SACnBF,KAAM,SAAAC,GACHlB,QAAQC,IAAIiB,GAERZ,EAAKd,MAAM4B,YAAaF,EAAKG,0CAMzC,OADArB,QAAQC,IAAI,eAAgBL,KAAK0B,OACzBC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,KAAGG,QAAShC,KAAKM,KAAM2B,MAAM,2EAA2EpB,GAAG,SAASkB,UAAU,uCAC9HJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,sBAAsB/B,KAAKJ,MAAM6B,OACjDE,EAAAC,EAAAC,cAAA,KAAGG,QAAShC,KAAKM,KAAM2B,MAAM,2EAA2EpB,GAAG,WAAWkB,UAAU,kDAlCzHG,IAAMC,YCCnBC,EAAQ,kBACVT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,8EAAwEH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,QAAT,QAAxE,OAgBWC,EAbD,SAAA3C,GAEV,OACA+B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SACVJ,EAAAC,EAAAC,cAAA,mBACwB,IAAjBjC,EAAM4C,MAAgBb,EAAAC,EAAAC,cAACY,EAAD,MAAY7C,EAAM4C,MAC3Cb,EAAAC,EAAAC,cAACa,EAAD,CAAM7B,GAAIjB,EAAMiB,GAAIY,MAAO7B,EAAM6B,MAAOD,YAAa5B,EAAM4B,eAEnEG,EAAAC,EAAAC,cAAA,cAAYE,UAAU,MAAMnC,EAAM+C,GAAG,SAAI,GAAzC,IAA8C/C,EAAM+C,OCb1DC,EAAa,SAAAhD,GACf,OAAO+B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAClBJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBADV,IAC6BJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,cAAhB,UAChCJ,EAAAC,EAAAC,cAAA,WACCjC,EAAMiD,KACHlB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAI,UAAU1C,EAAMiD,KAAMd,UAAU,cAA1C,IAAyD,UAAUnC,EAAMiD,KAAzE,KACF,OA8CKC,cA1CX,SAAAA,EAAYlD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACdjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KACD8B,MAAQ,CACTc,MAAO,GACPG,GAAI,GACJI,IAAK,GACLtB,MAAO,GACPuB,MAAM,GAEVnD,EAAK2B,YAAc3B,EAAK2B,YAAYjB,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IATLA,2EAYN4B,GACRzB,KAAKiD,SAAS,CAACxB,sDAEA,IAAAf,EAAAV,KACXkD,EAAS,cACTrC,EAAKb,KAAKJ,MAAMuD,MAAMC,OAAOvC,GACjCqC,EAASrC,EAAKqC,EAASrC,EAAKqC,EAC5BlD,KAAKiD,SAAS,CAACpC,OACfE,MAAMmC,GACD7B,KAAM,SAAAC,GAAI,OAAIA,EAAKC,SACnBF,KAAM,SAAAC,GACH,IAAMA,IAASxB,OAAOuD,KAAK/B,GAAMgC,OAG7B,OADA5C,EAAKuC,SAAS,CAACT,OAAQ,IAChB,EAEXpC,QAAQC,IAAIiB,GACZZ,EAAKuC,SAAS3B,sCAKtB,OAAQK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACJH,EAAAC,EAAAC,cAAC0B,EAAD,CAAOf,MAAOxC,KAAK0B,MAAMc,QAAO,EAAQ3B,GAAIb,KAAK0B,MAAMqB,IACnDJ,GAAI3C,KAAK0B,MAAMiB,GAAIlB,MAAOzB,KAAK0B,MAAMD,MAAOD,YAAaxB,KAAKwB,cAElEG,EAAAC,EAAAC,cAAC2B,EAAD,CAAYX,KAAM7C,KAAK0B,MAAMqB,cAvCjBb,IAAMC,kCCTxBsB,EAAQ,SAAA7D,GAAK,OAEf+B,EAAAC,EAAAC,cAAA,OAAKE,UAAS,eAAA2B,OAAiB9D,EAAMe,MAAQgD,MAAO,CAAEC,MAAO,QAASC,KAAK,SACtEjE,EAAMkE,MAiFAC,cA7EX,SAAAA,EAAYnE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IACdlE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,KAAMJ,KACD8B,MAAQ,CACTc,MAAO,GACPG,GAAI,GACJqB,UAAU,EACVC,SAAS,EACTC,UAAW,IAEfrE,EAAKsE,UAAYtE,EAAKsE,UAAU5D,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IACjBA,EAAKuE,WAAavE,EAAKuE,WAAW7D,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKwE,QAAUxE,EAAKwE,QAAQ9D,KAAbT,OAAAU,EAAA,EAAAV,CAAAD,IAXDA,yEAcRyE,GACNtE,KAAKiD,SAALnD,OAAAyE,EAAA,EAAAzE,CAAA,GAAgBwE,EAAM1D,OAAOC,GAAKyD,EAAM1D,OAAO4D,0CAG/C,OAAGxE,KAAK0B,MAAMc,MAAMc,QAAU,IAC1BlD,QAAQC,IAAKL,KAAK0B,MAAMc,MAAMc,QAC9BtD,KAAKiD,SAAS,CAACe,SAAU,+CAClB,GACFhE,KAAK0B,MAAMc,MAAMc,QAAU,KAChClD,QAAQC,IAAKL,KAAK0B,MAAMc,MAAMc,QAC9BtD,KAAKiD,SAAS,CAACe,SAAU,kDAClB,IAEPhE,KAAKiD,SAAS,CAACe,UAAU,KAClB,sCAIJM,GAAM,IAAA5D,EAAAV,KACbsE,EAAMG,iBACN,IAAMC,EAAOJ,EAAM1D,OACnB,GAAIZ,KAAKqE,UAAW,CAChB,IAAMvD,EAAO,CACT0B,MAAOxC,KAAK0B,MAAMc,MAClBG,GAAI3C,KAAK0B,MAAMiB,IAEnB5B,MAAM,aAAc,CAChBC,OAAQ,OACRC,QAAS,CACL0D,OAAU,mBACVzD,eAAgB,oBAEpBJ,KAAMK,KAAKC,UAAUN,KAExBO,KAAM,SAAAC,GAAI,OAAEA,EAAKC,SACjBF,KAAM,SAAAC,GACCA,EAAKsD,OACLF,EAAKG,QACLnE,EAAKuC,SAAS,CAACgB,QAAS,gCAAiCC,UAAW5C,EAAKwD,OAEzE1E,QAAQC,IAAIK,EAAKgB,MAAMwC,gDAM/B,IAAAa,EAAA/E,KACJ,OACI2B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACXJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,sBAAsBiD,SAAU,SAAAvE,GAAC,OAAEsE,EAAKX,WAAW3D,KAC7DT,KAAK0B,MAAMsC,SAAWrC,EAAAC,EAAAC,cAACoD,EAAD,CAAOtE,KAAK,SAASmD,IAAK9D,KAAK0B,MAAMsC,WAAc,KACzEhE,KAAK0B,MAAMuC,QAAUtC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACnBH,EAAAC,EAAAC,cAACoD,EAAD,CAAOtE,KAAK,UAAUmD,IAAK9D,KAAK0B,MAAMuC,UACtCtC,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAU5C,GAAE,SAAAoB,OAAW1D,KAAK0B,MAAMwC,UAAUnB,QAC1C,KACNpB,EAAAC,EAAAC,cAAA,YAAUlB,KAAK,OAAOE,GAAG,QAAQsE,YAAY,QAAQpD,UAAU,eAAeqD,QAAUpF,KAAKmE,YAC7FxC,EAAAC,EAAAC,cAAA,SAAOlB,KAAK,OAAOE,GAAG,KAAKsE,YAAY,KAAKpD,UAAU,eAAeqD,QAAUpF,KAAKmE,YACpFxC,EAAAC,EAAAC,cAAA,SAAOlB,KAAK,SAASoB,UAAU,0CAxE3BG,IAAMC,WC+BfkD,mLA/BP,OACI1D,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,IAAIP,UAAU,gBAAvB,SACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gDACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACVJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,oBACVJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAASiD,gBAAgB,SAASC,OAAO,EAAMxD,UAAU,WAAWO,GAAG,KAAvE,SAEJX,EAAAC,EAAAC,cAAA,MAAIE,UAAU,oBACVJ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAASiD,gBAAgB,SAASvD,UAAU,WAAWO,GAAG,QAA1D,aAOhBX,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACIvD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjCnB,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOK,OAAK,EAACC,KAAK,aAAaC,UAAW3C,IAC1CnB,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOK,OAAK,EAACC,KAAK,OAAOC,UAAW1B,cAzBtC7B,IAAMC,WCElBuD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DAsCN,SAAS4C,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT3E,KAAK,SAAA+E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5E,QACfuE,UAAUC,cAAcO,WAK1BrG,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBqG,MAAM,SAAAC,GACLvG,QAAQuG,MAAM,4CAA6CA,KC1EjEC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAtC,OAAMwD,GAAN,sBAEPxB,GAiDV,SAAiCM,GAE/BjF,MAAMiF,GACH3E,KAAK,SAAAgG,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASpG,QAAQsG,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMpG,KAAK,SAAA+E,GACjCA,EAAasB,aAAarG,KAAK,WAC7BuE,OAAOC,SAAS8B,aAKpB5B,EAAgBC,KAGnBU,MAAM,WACLtG,QAAQC,IACN,mEArEAuH,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAMpG,KAAK,WACjCjB,QAAQC,IACN,+GAMJ0F,EAAgBC,MC1CxB6B","file":"static/js/main.a04e1a7e.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../style/Vote.css'\r\n\r\nclass Vote extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        console.log(this.props)\r\n        this.vote = this.vote.bind(this)\r\n     }\r\n    vote(e){\r\n        let type = e.target.id\r\n        type = type === 'upvote' ? 1 : -1\r\n        const apiUrl = '/api/quote/vote'\r\n        let id = this.props.id\r\n        let body = { type, id }\r\n        fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then( data => data.json() )\r\n            .then( data => {\r\n                console.log(data)\r\n                // if ( !data || !Object.keys(data).length ){\r\n                    this.props.updateVotes( data.votes )\r\n                // }\r\n            })\r\n    }\r\n    render(){\r\n        console.log('vote state--', this.state)\r\n        return( <>\r\n            <div className='vote-div'>\r\n            <i onClick={this.vote} title='How much did you like this quote? You can vote as many times as you want' id='upvote' className='vote-el vote-btn fas fa-chevron-up'></i>\r\n            <span className='vote-el vote-count'>{this.props.votes}</span>\r\n            <i onClick={this.vote} title='How much did you like this quote? You can vote as many times as you want' id='downvote' className='vote-el vote-btn fas fa-chevron-down'></i>\r\n            </div>\r\n        </>)\r\n    }\r\n}\r\nexport default Vote","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Vote from './Vote'\r\n\r\nconst Empty = () => (\r\n    <> Whoops, Couldn't find any usefeul quotes. why don't you submit yours <Link to='/new'>here</Link>. </>\r\n)\r\n\r\nconst Quote = props => {\r\n    // console.log('Quote votes -->', props.votes)\r\n    return(\r\n    <div>\r\n        <figure className=\"quote\">\r\n                <blockquote>\r\n                    { (props.quote === -1) ? <Empty /> : props.quote }\r\n                    <Vote id={props.id} votes={props.votes} updateVotes={props.updateVotes}/>\r\n                </blockquote>\r\n            <figcaption className=\"by\">{props.by?'—':''} {props.by}</figcaption>\r\n        </figure>\r\n    </div>\r\n)}\r\nexport default Quote","import React from 'react'\r\nimport Quote from './Quote';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst BottomLink = props => {\r\n    return(<div className='share-div'>\r\n        <i className='fas fa-link'></i> <span className='share-link'>Share!</span>\r\n        <br />\r\n        {props.link ?\r\n            <Link to={'/quote/'+props.link} className='share-link'> {'/quote/'+props.link} </Link>\r\n        : null }\r\n    </div>)\r\n}\r\nclass ShowQuote extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            quote: '',\r\n            by: '',\r\n            _id: '',\r\n            votes: '',\r\n            comp: false\r\n        }\r\n        this.updateVotes = this.updateVotes.bind(this)\r\n    }\r\n    \r\n    updateVotes(votes){\r\n        this.setState({votes})\r\n    }\r\n    componentDidMount(){\r\n        let apiUrl = '/api/quote/'\r\n        let id = this.props.match.params.id\r\n        apiUrl = id ? apiUrl + id : apiUrl\r\n        this.setState({id})\r\n        fetch(apiUrl)\r\n            .then( data => data.json() )\r\n            .then( data => {\r\n                if ( !data || !Object.keys(data).length ){\r\n                    //no quotes found\r\n                    this.setState({quote: -1})\r\n                    return 0;\r\n                }\r\n                console.log(data)\r\n                this.setState(data)\r\n                // console.log('showquote state--',this.state)\r\n            })\r\n    }\r\n    render(){\r\n        return( <>\r\n            <Quote quote={this.state.quote||false}  id={this.state._id}\r\n                by={this.state.by} votes={this.state.votes} updateVotes={this.updateVotes}\r\n            />\r\n            <BottomLink link={this.state._id} />\r\n        </>)\r\n    }\r\n}\r\nexport default ShowQuote","import React from 'react'\r\nimport '../style/SendQuote.css'\r\nimport  { Redirect } from 'react-router-dom'\r\n\r\nconst Alert = props=>(\r\n    // margin: '1em',\r\n    <div className={`alert alert-${props.type}`} style={{ width: '100%'}} role=\"alert\">\r\n        {props.msg}\r\n    </div> \r\n)\r\nclass SendQuote extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            quote: '',\r\n            by: '',\r\n            errorMsg: false,\r\n            succMsg: false,\r\n            sentQuote: {}\r\n        }\r\n        this.formInput = this.formInput.bind(this);\r\n        this.formSubmit = this.formSubmit.bind(this);\r\n        this.isValid = this.isValid.bind(this);\r\n        \r\n    }\r\n    formInput(event){\r\n        this.setState({[event.target.id]: event.target.value})\r\n    }\r\n    isValid(){\r\n        if(this.state.quote.length <= 10){\r\n            console.log( this.state.quote.length )\r\n            this.setState({errorMsg: 'Quotes have to be at least 10 characters.'})\r\n            return false\r\n        }else if(this.state.quote.length >= 200){\r\n            console.log( this.state.quote.length )\r\n            this.setState({errorMsg: 'Quotes cann\\'t be longer than 200 characters.'})\r\n            return false\r\n        }else{\r\n            this.setState({errorMsg: false})\r\n            return true\r\n        }\r\n    }\r\n    \r\n    formSubmit(event){\r\n        event.preventDefault()\r\n        const form = event.target\r\n        if( this.isValid() ){\r\n            const body = {\r\n                quote: this.state.quote,\r\n                by: this.state.by,\r\n            }\r\n            fetch('/api/quote', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            .then( data=>data.json() )\r\n            .then( data => {\r\n                if (data.succ) {\r\n                    form.reset()\r\n                    this.setState({succMsg: 'Quote submitted successfully!', sentQuote: data._doc})\r\n                    // this.setState({})\r\n                    console.log(this.state.sentQuote)\r\n                }else{}\r\n            })\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return( \r\n            <div className=\"jumbotron mt-sm-5\">\r\n                <form className='container send-form' onSubmit={e=>this.formSubmit(e)}>\r\n                    { this.state.errorMsg ? <Alert type='danger' msg={this.state.errorMsg} />: null }\r\n                    { this.state.succMsg ? <>\r\n                        <Alert type='success' msg={this.state.succMsg}/>\r\n                        <Redirect to={`quote/${this.state.sentQuote._id}`}/> \r\n                    </> : null }\r\n                    <textarea type='text' id='quote' placeholder='Quote' className=\"form-control\" onInput={ this.formInput }/>\r\n                    <input type='text' id='by' placeholder='By' className=\"form-control\" onInput={ this.formInput }/>\r\n                    <input type='submit' className=\"form-control btn btn-primary\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SendQuote","import React from 'react'\r\nimport '../style/normalize.css'\r\nimport '../style/App.css'\r\nimport ShowQuote from './ShowQuote'\r\nimport SendQuote from './SendQuote'\r\nimport { BrowserRouter as Router, Link, NavLink } from \"react-router-dom\";\r\nimport { Switch, Route } from 'react-router'\r\n\r\nclass App extends React.Component {\r\n    render(){\r\n        return(\r\n            <>\r\n            <Router>\r\n                <div className='navbar-expand'>\r\n                <nav className=\"navbar navbar-light\">\r\n                    <div className='container'>                \r\n                        <Link to='/' className='navbar-brand'>Quote</Link>\r\n                        <div className=\"collapse navbar-collapse justify-content-end\">\r\n                        <ul className=\"navbar-nav\">\r\n                            <li className=\"nav-item mr-sm-3\">\r\n                                <NavLink activeClassName='active' exact={true} className=\"nav-link\" to='/'>Home</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item mr-sm-3\">\r\n                                <NavLink activeClassName='active' className=\"nav-link\" to='/new'>New</NavLink>\r\n                            </li>\r\n                        </ul>\r\n                        </div>                       \r\n                    </div>\r\n                </nav>\r\n                </div>\r\n                <Switch>\r\n                    <Route exact path='/' component={ShowQuote}/>\r\n                    <Route exact path='/quote/:id' component={ShowQuote}/>\r\n                    <Route exact path='/new' component={SendQuote}/>\r\n                </Switch>\r\n            </Router>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './comp/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}